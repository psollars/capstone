We have talked about how to represent
a set of categorical items. We've introduced
the representation as itemset. Itemset is the part of representation
that handles a set of categorical items, but it does not handle order or
quantity among these items. To handle quantity we introduced
vector representation, which does handle numerical numbers. But what about others
among the category items? Neither itemsets or vector handle that. Why do we care about the order
among the category items? Let's look at a example. Suppose you're building a course
recommended system, and we've talked about frequent
pattern extraction. So if you observe that many people
who have taken data mining have also taken the course Python Programming. Then based on this pattern
the recommended system, if it knows you have taken
the course data mining, it would recommend you to take
Python Programming as your next course. Now the question is does this
recommender system makes sense or not? Of course it does not make sense. You may argue that once I
have taken data mining, I should have already taken
Python Programming, right. So this is all about
the order among items. If you include the order among the items, then you will make such
mistakes in recommendation. Don't treat this as just a toy example,
it does happen in reality. So this is the page from
my Facebook timeline, you can see that Facebook is trying
to make recommendations to me. And on the right-hand side you can see
that Facebook is recommending this Dell laptop to me. And the reason I can see that they
recommended this model to me is because I built this model,
the very model of that laptop on dell.com. But the problem is that I decided
to purchase a different model, and then Facebook is still
recommending this item to me. Does that make sense? So you can see that even the recommend
assistant at Facebook makes mistakes. Having already really purchased another
model, is this ad still relevant? If you ignore the order you will
see that it is, but if you do care about the order among my activities
you should make another decision. When we consider order among
the category items we are moving from itemsets to a new
recommendation as sequences. A sequence is the powerful
recommendation to handle complex data objects where there are orders
among character items. The examples of such data objects
could be the curriculum path, it could be the DNA sequence,
it could be a session of search queries, a sentence of words or
a sentence of user actions. So among all these examples you
have a set of category items. For instance, in the curriculum paths
you have a recourse as the item. The amount of these items
you also have the order, so the items are organized
in sequential order. In this case,
the order between these courses matter, you have to take some courses
before you take other courses. And if your data object is
organized in this ordered manner, it can be viewed as the sequence. Formally we can define the sequence data,
as is our case x, as the set of categorical items associated
with the particular order or the position. So you can see that (x,1), (x,2),
through (x,k) are the categorical items. And then the associated number,
1, 2, and k, are the orders or positions of these items as
they appear in the sequence. Sometimes we define the sequence. We denote the sequence in a simpler way. For example, we just denote
a sequence X as (x,1) to (x,2) to (x,k) as long, as we have
the orders indicated it is fine. So sometimes you can see that people
are even using the most simpler way to denote the sequence data,
which is x1, x2, just to xk. We're not even showing the arrows,
but it's the same thing. You can see that all
the category items follow order, and orders are indicated by the index 1,
2, to k. As another example of sequence data, we can look at the DNA sequences widely
concerned in biological data mining. So in a DNA sequence, the category
items are called the base items. We have four of them, A, T, C, and G. You can see how these
base items are organized in the human genome or
in the DNA sequences of other species. So now one particular
task of data mining for this DNA sequences is to
align them together to identify the largest common subsequences. And by doing that people usually
add gaps in between items. So you can see that in the first
three rows the sequences or the items, right,
any go over consecutive to each other, and then once you add gaps you create your
alignment among multiple sequences. The reason that we can add gaps in
between multiple items indicates that only the order among the items matter,
the actual position do not matter. As long as you preserve the order of these items you can add as
many gaps in between them, right. So the actual position index does
not matter in a sequence data, only order matters. Another example of sequences that
you can see frequently in your daily applications is
the behavior sequence, right. If you work for the search engine company
or any other user oriented interface, you can usually collect people's
reactions, people's actions, people's activities on your website. See in a search engine
you can collect queries, URLs that people click on, and
other kind of clickthroughs, and they follow an order that will give you
the behavior sequence of your user. For instance, the user may issue the query Mustang to the Yahoo search engine and
click on the URL and then click on another URL, then click on
the curren recommendation functionality could also try, that generates
another query, Ford Mustang, and then click on another URL, and
then the user change the query into Nova. So on so forth. And order matters. Based on this order
sequence you may be able to guess what the user is
actually looking for. So you can see that these are the indices
of the items in sequence. They only indicate the order of the items, they do not indicate the actual timestamp
or actual position of this items. Again, only order of actions matter,
the time stamp, the actual time stamp does
not matter that much.
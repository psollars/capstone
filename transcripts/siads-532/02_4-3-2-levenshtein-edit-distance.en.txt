So what's so interesting about
this spelling correction task? You can say that the fundamental challenge
here is to measure how close are the two strings in terms of whether one could have
been the spelling mistake of the another. So this move away from it are but instead
to use the same for example, right? What about the input is
the word computer and you want to figure out whether this
input word computer could have been misspelled from the worked
computing or counter, right? So the key is to measure the string
distance between the word computer and word computing or the word computer and
word counter, right? And a string is a special case of
a sequence where the items are characters. So we hope that the good
metric of similarity can help us measure whether
computer is closer to computing or counter in terms of
a sequence of characters. An answer to this question is
the strength distance metric known as Levenshtein edit distance. What a Levenshtein edit distance does is to measure the smallest
number of single Character edits that are needed to transform one
sequence one string to another. So what do we mean by
single-character edits? The could be insertions, right? So you insert one single character into
the sequence to transform it into another. Or deletions, you drop one character
from one sequence to get another, or substitutions, right? You change one character in original
sentence in the original string into something else to get another sequence and all the three allowed as
a single character edits. So you can see that these three
types of edits are closely related to your keyboard operations,
right? You could mistakenly insert letter or
drop a letter or landed a different letter that could have
resulted into the spelling mistake, right? And Levenshtein edit distance is to
measure what's the smallest number of such mistakes you make, right? Or what's the smallest number of edits
you needed to transform the misspelled word back into the correct one. So this look at how many edits, under this
definition, how many single character edits do we actually need to transform
the word computing to computer? Well, one way to shows
that one way to do this transformation is through three edits. Where you just delete
the character I from computing and then you substitute the two letters N and
G in computing into E and R. That's how you can transform
the word computing into computer. So you ended up with one deletion and two substitutions that gives
you the edit distance of 3. That means the word computer is three
edits away from the word computing. Similarly, you can also
measure how many edits it takes to transform the word
counter to computer, right? Intuitively, do you think
it takes more edits or fewer edits than the word
computing to computer? But let's look at that. In fact, you can also see that
the word compute the counter can be transformed into
computer through three edits. You first delete the letter
N from counter and then you insert two letters M and
P in between the letter O and U. So through one deletion and
two insertions, you can also transform
counter into computer. That gives you an edit distance of 3. And in fact, there are different ways to transform
the word counter in the computer. Alternatively, you can also first substitute the letter U and
N into M and P. And then, you insert in another
letter between P and T. Then through two substitution
transactions and one insertion, you can also transform country into computer,
then again gives you edit distance of 3. Is that intuitive or counterintuitive? Looks like through the calculation of edit
distance, we can see that both the word computing and the word counter are three
edits away from the word computer. In other words,
those two words are equally close to the word computer in
terms of editing distance. Does that make sense? So it looks like edit distance give
us the way to quantitatively measure the closeness between two strings,
between two sequences.
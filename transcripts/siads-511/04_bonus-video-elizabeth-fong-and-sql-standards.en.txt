[MUSIC] And they were part of the coming,
going from wild. And then we realized that,
hey, I want to buy a product. What kind of a feature do I need? Another one of the things that I
have done is the feature analysis. So we have about half a dozen of product. And the standardization
are really building a consensus. We brought from a matured technology that are ready to be
standardized where people say, do I buy IBM or do I buy Oracle,
or shall I buy a cheaper one? This kind of a decision started emerging. And selection of, I mean, how many variety of application you can build on
top of a software foundation, what I call a database management system,
is too varied. And so you want to have
some sort of a standard so that your application can
work on different platform. We work with files, and
we call it the file system. The files are hierarchical,
they were in the IMS, the IBM information management system,
which is a tree structure. And the debate was going on
whether there should be a tree or a network or a flat file. And we are still debating
whether the data have a self-describing tag, and later on,
we known it as a metadata. And now, people call it the schema. So the Database System Study Group
come up with a reference model or a specification for a minimal functionality
of a database management system. In order to be a database management
system, you want to be able to store data, retrieve data, modify data, organize data, delete, manipulate data,
and it becomes a spec. And during that time
there was a birth of a, we initiated a birth of a ANSI group. It's now called INCITS, the ANSI
American national standards group. And it's called the X3H2
of which Don Deutsch and people like Len Gallagher
all participated in that. That group is called the data
management language. In order to standardize anything, you realize that you can have a lot
of light bulbs, for example. You can have red light bulb,
white light bulb. The only thing you want to standardize is
when you want to talk to another person. Communication, interface, or a area where both of us have to understand
a common vocabulary, or whatever. So the standard, the only standardization of a software system is not
the capability but a language. And relational database
at that time was IBM, Chris Date, and
he's talking about normalization. He started talking about flat file and he called it a table, and it's a very
easy concept that everybody understand. So in order to retrieve a table, you say select from a column such and
such, from a table of employee, and there was a birth of
a simple query language. Testing part is also very important
aspect of when you adopt a standard. You want to certify that
the product conform to such and such version of ISO standard,
or JTC 1, whatever it is. So that gets to be if your,
otherwise your app won't work. Your application, let's say you
build a student course record. And no matter, you got Oracle, you got a Xybase or Microsoft SQL, you want your
application to work no matter what. And that's what the marketplace
wanted to go, the user. Of course Oracle, or Microsoft, buy my
product, Oracle would say buy my product. And in the procurement, you say, I want to be compliant with SQL. And so you have to have
the conformance testing certificate. And we have the NVLAP,
it's a laboratory that's certified and gives you a validated product list. Here is the list of product that have been
validated that they conformed to it. And you can buy from that list,
but there is a requirement. This is strictly user. You're buying, because
you're paying the money, not us. Timing is everything. You can't standardize a thing too early, or you drive a lot of
innovative concept away. Because people say,
hey, there's no way for me to get into your market,
because you already decided. And even though it's not very good,
I won't get into that business. So, you killed innovation. And if it is too late,
you missed the opportunity, you get too many variety of things
coming up, and the choice is too much. But, of course, SQL is one of
the success stories that we have. [MUSIC]
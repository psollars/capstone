So we just got done
using WHERE clauses in regular expressions to
pick which rows to show. Now, what we're going to do
is we're going to actually do stuff with the columns that
come back from those rows. So we're actually
parsing the results. Now, in general if you just
need the whole column, you just select email
and away you go. But basically, we can then also use regular expressions
to parse the columns. So if we take a look
at this first thing, we're going to select
a substring of email and so this
can be SELECT email. Here's a WHERE clause
just like we did before. But basically what
we're going to do here, is we're going to actually
pull out those digits. So this is read
that email address, and find zero through
nine, which is digits. So that [0-9] is a digit. Then we have this
plus. Now, this plus is a modifier that modifies that, and that's one or more. So if you put a star, there'd
be zero or more which would match everything because zero or more digits is everywhere. So plus means one or more
digits, okay? But it also is going to be greedy in that it's one or
more contiguous digits, and if there were like a
string that had like 1 2, and a string that had 3 4, and a string that had 5 6,
it would get the first one. So we'll talk in a second
how you get the second one, but in this case it
gets the first one, so you see that 79 from one of the email addresses and 1. So this actually you can see this is kind of pushing
out and expanding, and it's like find me all the numbers
that are contiguous, okay? Then we can do a much
more complex one. So this is a way to pull the domain name out
of an email address. And so this one takes a
little bit of explaining. So dot, if you go back to your cheat sheet, matches any character. Plus is a modifier
that matches that. So that says dot
means any character, one or more of those characters,
followed by an at sign. So what that does is if
there is something here, and then an at sign, it's a way of scanning up till the moment that
you find the at sign. Then what we have is the
parentheses character. The parentheses character
says, start extraction here. Start extraction at the
character after the at sign. Dot star means any character
as many times as you want. So like blah blah blah
blah blah blah blah, and then chop that out, and then dollar is
the end of the line. So this literally stated basically says scan a line
untill you find an at sign, and then give me everything from the at sign to the
end of the line. That's what this regular
expression says. It's awesome. And again, you just got to
look at these things, remember the plus modifies
the one before it, and the star modifies
the one before it, parentheses the start, at
sign is just a character, dollar sign is the
end of the line. So the only thing that's really
just a character that's not programming in this whole
thing is the at sign. And that's basically how to pull the domain name off of
an email address column. You could do that in Python and I'm sure you have done
that in Python, especially if you've
taken one of my classes. But here's how you do it in regular expressions.
And you can actually use this exact same regular
expression in Python. If you took my Python class, Python for Everybody, you
actually saw this example which I borrowed literally
from Python for Everybody. Okay. So this one here is
pretty much the same, it is just doing a DISTINCT, it's adding a DISTINCT so that now that basically says all of the domains of all the email addresses from this database. That's what that's doing. I
could even say an ORDER BY, we'll do some ORDER BY examples. So that's that same
regular expression that basically says go
up to the asterisks, start extracting, extract all the way to
the end of the line. Now, we can do other things. Now, this one here that you'll see is a little kind of ugly, so I'll just tell
you that this part here, email from that, email from that, and all the places that says
email, those are identical. I couldn't put that like in
a variable or something. So just think of
that as like it gets us this email address
from a column of email. So what we're going to do
is we're going to select, pull out the email address, and then we're going to
count each email address, and then we're going
to do a GROUP BY this same thing, which is the
domain name of the email. You can almost think of
this as domain name, right? So we're going to select it, then we're going to count them, and
then we're going to use a GROUP BY of this same thing. And so this is a kind of
variation on DISTINCT except that when it's
taking the apple.com, and it turns out that
there's two of them, it remembers that
there were two of them. uiuc.edu, it remembers
that there are one, umuc, that remembers there were one, and there were two
umich.edu addresses. So you can put these
in various parts of the SELECT statement that looks a little cryptic by the time
it's all said and done, but it runs just fine once the database engine can
take a look at that. Okay? Now, remember I said
that if there's like a one, two, three, four, everything I've shown you
so far is going to pull the first one out and
ignore all the rest of the ones. It could be in five, six, right?
So it ignores the rest of them. Sometimes you want to
get all of the matches. So the substring call gets the first match in a text column, ignoring the other
matches even if the regular expression
would match more than one, but we can get an array of matches, which is kind of
different than a column. It's like an array that you get when you
do a SELECT statement. And we use the function
regexp_matches, which basically says. it looks pretty much the
same as substring, it's just now I want all the matches
instead of whatever. And you have to in your
code do something a little bit differently
when you've received these but an application
that we're going to do is hashtags. And so we're
just going to be looking. So we put some hashtags in like these might be
tweets or whatever. So we have hashtags and
then we're going to take a look at how to
pull these hashtags out. So here's our tweets with
lots of hashtag in them, and so we can put this
in a WHERE clause but this is exactly what we did before where it was like okay, find all the tweets that have
hashtags in them, right? Or the hashtag SQL. So this one goes through
and finds SQL, finds SQL. We could've done that with a
LIKE clause if we wanted to. And we don't see the one
here that says UMSI Python. So that's just a WHERE clause. That is something
that we did before. Now, we're going to
use regexp_matches, okay? So let's take a look at the code. Pound sign, that's
just a character. Parentheses says
start extraction, other parentheses
says end extraction. Then we have a set. This equals one character, and inside it are what
the legit characters are. So capital letters,
lowercase letters, and numbers, and underscores. So we've decided that's
what our hashtags are is a pound sign followed
by then at least one, the plus means at least one, upper, lower, numbers,
and underscores. And so that's what we're matching. But what we've done is we've
said regexp_matches, and that means go across
the line and find it. And because we didn't put the
pound sign in the parentheses, I could have put the
parentheses outside it, you'll see in the matches, we
don't get the pound sign. Again, that was my choice. I could have done it
either way but I just wanted the tags without
the pound signs, and so that is the
list of the tags. We can use SELECT DISTINCT. g means all the way across. That's all the way across. We do a SELECT
DISTINCT to remove, so all of the tags
in this database, there they are and we've
removed any duplicates, but then we can also
do things like say, okay, I want to select the in addition. This is the same. In addition I want to know which tweets, what the primary key of the tweet is that had that
particular thing in it. And so tweet 1 has SQL and FUN, tweet 2 has SQL and UMSI, and tweet 3 has UMSI and Python. So this would be a
thing that you could then do something
with but you would basically sort of extracted
and expanded and kept track of
which tweet you're in. Who knows what you're
doing with this. But that's the kind of
thing that you can do. So the main thing we talked about here is this regexp_matches, which goes across the whole
line grabbing as many times as this pattern can be fit to that line and then giving you an array of all the
things where they match. So that kind of sums up this set of
string manipulation lectures. I'm going to do a sort of code demo, where I do one of my
favorite examples of reading through email addresses, parsing email addresses, and calculating counts of things, and we're going to
do it all in SQL. Some of you who may have taken my class online or
others that use my book, have done this in Python with dictionaries and lists
and tuples and sorting, etc. and we're going do it all in one or two statements with
SQL in this particular demo. So I will cover that demo. This is sort of a tantalizing
look into it. We're going to
actually read a file, we're going to pull it
all in as flat text, lines in a database, and then we're going to run
some regular expressions. We're going to use a WHERE clause to pick the right lines, and then we're going to do
some GROUP BYs and ORDER BYs, and when it's all said and done, we're going to end
up with a list of email addresses and counts of the times that those
people sent the email. And we're going to
do it two ways. We'll do it with and without a SELECT statement and
we'll take a look at some of the performance implications and why it is that you don't want
to use a SELECT statement. Okay? So thanks for watching,
there's a lot in this. Thanks for watching this
first part of the SQL class.
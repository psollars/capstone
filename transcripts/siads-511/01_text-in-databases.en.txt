Hi there. Welcome to this fourth and final
lecture in SQL. We're going to talk about
text and databases but really this is much
more than that. After the first two lectures
we've really been just using any excuse to teach you
more in-depth SQL skills, and you may or may
not use some of these skills in text but they're just
skills that you need. So the first thing
we're going to talk about is how to generate some test data in Postgres. So we're going to talk for
the first time. I've been talking about
performance all along, but now we're going
to start talking in more detail and actually looking at how you decide
about performance. So the problem is all my
little examples so far, like I put five records in and
I show you some queries, but now I want to put
some more data in. So the problem is if you
think about it you got to, let's say you need 10,000
records or a 100,000 records, or even a million
records so you can check to see how fast a query runs with various
indexing options, etc., etc. And we're also going
to look a little bit about how much space we start using as we make
different decisions. So we'll get to all that. But the first thing
as a prerequisite is to fill your
database up with data. And so you could write
a Python program, and you could open some stuff up, and you could write
some for loops and then write stuff
into the database, or you could use shell scripts, but it turns out
that Postgres has some wonderful mechanisms that allow you to generate
random data. And so there's some functions,
and we'll look at each of these with some examples, but the repeat function allows you to create
long strings. So you just take a
string like, you know, ABC, and say give me a thousand, and it's like 4,000 characters or 3,000 characters, ABC, ABC, ABC, it kind of doesn't matter. Then there's random, which gives you a random number
between zero and one, and we use functions like trunc, so you can like multiply that by
a 100 and then trunc it, and then get an
integer between 0 and 100, or you can say give me a number
between 1,000 and 9,000, and then you get a bunch
of four-digit numbers, so we can figure all that out. Now the one that's cool is
a thing called generate_series and it's a way to
generate multiple rows. And so generate_series is how
we generate a lot of rows. And so we'll look at each of
these with a simple example. So the first simple
example is random. So basically random just gives you a number
between zero and one, it's a floating point number, right? So I call it twice, I get
two different numbers, and then I just multiply it
by a 100 and then I trunc it. So that becomes the random number between 1 and 100 that's
a floating point, but trunc says convert
that to an integer. Now the repeat one, right? So I'm just taking the word Neon with a space and
repeating it five times, so that's sort of a horizontal
concatenation. And so sometimes when you're building keys or whatever you
just want them long. You'll see in a sec we just put some random stuff
in it and then just a bunch of text and that's
usually good enough, but this generate_series
is really kind of cool, If you think about it
from a Python function, well, it's like
the range function in a sense if you
think about Python. So for i in range 5, that actually then
generates five. and so generate_series
1 through 5 generates a series of numbers but it also then if you concatenated
it generates rows. So these first two
generated one row, that's a random number, that's a long string, but this is five rows, and so we combine all these
things together to generate lots of rows of long data
with some randomness. That's what we're
going to accomplish. So here we see a
SELECT statement, right? So we're going to have a string,
double vertical bars concatenate string concatenation. So we're going to
take sql4e.com/neon concatenated with a random number that's between zero and it
looks like a million, concatenated with repeat
the word Lemon five times, and then to create more rows we also concatenate this.
This is all one thing. So this generate_series
is so cool, it like explodes into the numbers one, two, three, four,
five vertically, and so that forces
all these things to be calculated five times, and so we end up with five rows with reasonably long
bits of information, and a random number, and then a sequential number. So with these techniques you can construct a whole bunch of data.
Okay? So it's random, trunc, repeat, and generate_series, and then you just insert these things in. And so up next, we're
going to use this, and we're going to talk about some of the text functions that we can do with data once we
have it in the database.
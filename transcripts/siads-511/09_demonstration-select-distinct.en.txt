Hello, and welcome to another
PostgreSQL walkthrough. In this particular walkthrough, we are going to work on
DISTINCT and DISTINCT ON. So I'm going to create a table, and I'm going to put some vertical
replication in it because DISTINCT is a way of eliminating
vertical replication. And so I'll just go ahead and
fill this in, create the table, and put that data in with lots of vertical replication for
these makes and the models Nissan, Dodge Neon, Dodge Neon, Dodge Neon.
So we even have sort of some with nothing but the price
and the year change in the three Dodge Neons, etc., etc. So the key idea is
SELECT DISTINCT. So let me first say just
SELECT make FROM racing. And you see that there's a bunch
of vertical replication, right? Dodge, Dodge, Dodge, Ford, Ford, Subaru, Mazda, Mazda. So all you have to do is say, "you know what, I don't
want any duplicate rows." So the simplest form of
DISTINCT is the most powerful. SELECT DISTINCT make FROM racing. All that says is "don't show
me the same row twice", right? And so that sort of just
gives you the rows, but only the ones that
only once. You can think of it as it's going through the SELECT and it says, "oh this is going to produce
a row, is it already there? If it is, don't put it in again." It's as simple as
that because it's going through the
database finding all the rows that match whatever
WHERE clause, etc. And you can say, "I'd like to SELECT DISTINCT make,model." And then that basically does the
combination of make and model. SELECT DISTINCT make,model
FROM racing, and that's this. So that again it follows
this rule of the row, which is the combination
of all those fields. Don't give me more than
one identical one. So that's basically doing
this distinct processing. Now, you can control DISTINCT a little bit more with
this DISTINCT ON. And so what the DISTINCT
ON does is it basically says, you know,
give me these rows. And what I really want is, I'm really most interested in duplicate removal in
one of the columns. So I can say SELECT DISTINCT ON (model) make,model,year FROM racing. And so that says I really don't want any vertical replication
in the model column, right? So there's no vertical
replication in the model column. Now this is a little
different than just doing a select of make,model,year year from racing. Okay? So there's a lot of vertical replication and it
eliminated this, but the interesting question is like in these Dodge Neons
that have three numbers, which of those three
numbers made it in? So we're doing the
DISTINCT reduction here on the model that we want, but it really is discarding. So it's creating all these rows, creating all of the make,model,year row combinations. And then it's discarding
them because we've asked for a distinct processing
on the model field. But do we know which
one of the makes it got although there's actually
no duplication of makes. But let's look at
years for the moment. Which year is going to pick? Well, you can do that by specifying
an ORDER BY at the end. And then it will kind of pick the first
row that it encountered. So if I say SELECT make,model,year FROM racing ORDER BY year DESC,
that says, do that descending by year. So there we got the
year descending. So the Dodge Neons where's
my Dodge Neon '95, '99, '98, right? Probably what I wanted to
see there was I wanted to see by the model m-o-d-e-l, the model, and then the descending. So now it makes more sense. So I see the model's been sorted, but then within the
duplicate it sorts them. And then what I can say is I
can add to this, I can say, DISTINCT ON, and then I'm going to basically as it's
going through model, it'll find the first one. So you'll see that it
finds the first one, and discards any duplicates
in the model column, but it's because I've
ordered by it, right? I've done an ORDER BY, I'm
going to get the first one. So if I add to this and say, SELECT DISTINCT ON model, it's going to go through. It is going to go
through these rows. They're going to be ordered
by model and year in descending. Then it is basically going to be doing the discarding by
looking at this and say, "do I already have
one of these models? If I do in this GT case I'm going throw the
second one away." Right? So you'll see that it throws everything, it only
pulls, in effect, within any group of
models because you'll notice that I ordered it by model first and then year
descending second. It's going to only
pick the first one. So let's see what we get. So we get Mazda Miata 2002 and
indeed Mazda Miata 2002 is the first of that set of rows. So I could just
not do descending, and you will see that
it's going to give us the earliest model of, say,
my Dodge Neon 1995. And ff I look at my Dodge Neons, I have '95, '98, and a '99 Dodge Neon. Now, SELECT make,model,year
FROM racing. I type too fast. SELECT make, model, and year
from racing. So with all that
SELECT DISTINCT ON, I would just point out that 90 percent or more
of the SELECT DISTINCTs, I don't use DISTINCT ON. I just say something like SELECT DISTINCT model FROM racing. So there's usually
like one column or sometimes I'm doing
it with a bunch of rows where there might be
duplicate rows after that. Because the one thing that
SELECT does is it reduces the rows. SELECT DISTINCT model FROM racing. There we go. Or you could even look at this.
What are all the years? I could say to SELECT
DISTINCT year FROM racing, right? Those are the distinct years. If I don't put DISTINCT in, I should have some duplicates. So they threw way some things. So the whole idea
about DISTINCT is that SELECT DISTINCT
just basically says, and you can have more
than one field in here. It just says don't show
me the same row twice. And because the SELECT is reducing the data
that it's getting, it actually is the
post-reduction row that is the distinct
processing is handled by.
In this session, we're
going to deal with Univariate Data which is
really just a fancy way of saying the kind of data that
goes into a single list. Analysis of univariate
data isn't really concerned with the why questions, the causes, or all relationships,
or anything like that. The purpose of univariate
data is simply to describe. Univariate data come from making a particular measurement on all of the subjects
in a sample and represent our observations for a single characteristics such as age or gender or speed at task
or response to a stimulus. We can think of these
measurements as representing a sample distribution
of a variable. So our goal here with univariate non-graphical
exploratory data analysis, is really just a
better appreciate the sample distribution
and also to make some tentative
conclusions about what population distributions are most compatible with our
sample distribution. For instance, outlier
detection is also a part of this analysis but that's something we'll be discussing
later on in the course. Today, we'll be focusing on understanding how we
can calculate and visualize univariate
sample statistics such as central tendency,
standard deviation. The central tendency
or location of a distribution has to do with
a typical or middle values. The common measures for this
are things like the mean, the median, and
sometimes also the mode. Let's take a look at an example and see how we might calculate this sample statistics
on a pandas dataframe. First, import the
pandas dataframe as pd. So import pandas as pd
and numpy library as np, so import numpy as np and we'll load in the iris dataset which we'll
be using for our example. So Iris equals pd.read csv. Let's check out the
first five rows to see what we're working with. So print iris.head, and we can see this
dataset consists of three different types
of iris flowers, and their petal and
sepal length and width stored in 150 by
five numpy array. We can use the.info method
to print information about the data frame including
the index dtype and column dtypes, and non null values,
so iris.info(). This will show us
the sepal length and details about the dataframe. The .mean function will give us the mean of a
single variable like sepal width or sepal length
which is about 5.84. So iris['sepal_length'].mean
and 5.84. Similarly, we can calculate the standard deviation by using the .std function
for this in pandas. So iris sepal_length.std
will give us the standard deviation
which is about 0.82. However, when exploring our data, we usually want to know
a bit more about it. So let's use the pandas describe function to
calculate the mean, standard deviation,
interquartile range, and the other values
for sepal length. So we'll do
iris.sepal_length.describe, and as we can see, this will give us a lot more useful information
about this variable. So for instance we
have the count, the mean, as well as the
inter-quartile range values. We can call the.describe
function on this iris data and
it will exclude the character columns and
provide a summary statistics for only the numeric data
within the dataframe. So iris.describe. We need to add an argument
named include all to get all the summary statistics
or descriptive statistics for both numeric and
character columns. So we can do iris.describe
all include equals all. Remember that there are
three different types of iris species in the datasets. So we would want to explore the summary statistics
by each group. To do this, we can just use the pandas groupby functionality. Groupby essentially
splits the data into three different groups along
the variable of our choice. So iris.groupby, using
species, for instance, combined with the.mean function will split our
current Data Frame by the three different species
within it and give us a mean for each of those along
the petal length variable, or we can use this
with.describe to get all of the summary
statistics for each group. So iris.groupby
species.describe and that will give us all of the summary statistics
by each group. Summary statistics often
don't tell the whole story. Anscombe's quartet is an unforgettable demonstration
of this principle. So let's go start visualizing these statistics
using matplotlib. First, let's import
matplotlib as mpl. So import matplotlib as mpl and pyplot scripting
for a layer as plt. So import matplotlib,
pyplot as plt. We'll need to
calculate the mean and standard deviation
for each variable. To do this, we'll use the
same approach as before but we have to save
the results for each variable into
a variable name. So now we can call the new variable their variable
name plus mean. So sepal length_mean
is iris length.mean and petal length and sepal width and petal width
and sepal width and so on. We can do the same thing
with the standard deviation. So we'll just use the
same variable name, plus std, at the end of it to indicate that it's
standard deviation. So we'll do sepal length, petal length, petal width, std sepal width,
std and we're done. Matplotlib's bar
plot function can be accessed using the plt.bar. We'll need to include at least
two arguments here below. One, a list of the bar labels, and two, a list of
the bar heights. We will pass iris
data variable names for each list of the bar labels, and the means for
each variable just to create a list of
our bar heights, plt.bar and then again we'll
insert the variable labels, sepal length, sepal width and so forth and then
their associated means. Then we'll use the plt.show(), this command will
show the plot for us. So this shows us the
means for each variable, but again remember that there are three different iris species
in the dataset so we would want to get and visualize the summary statistics
for each group. To do this, we'll just use the groupby function
again to get the mean. Iris.mean equals iris
groupby species.mean, and if we can show this
by using the iris.mean, which is where we save that. Same thing for the standard
deviation for each group. So we'll do iris_std
equals iris groupby species.std and use the iris.std holder place to show
us what we just calculated. Now that we have
that information, we can start to construct
a figure that shows us some mean and standard
deviation for each of the variables
by their type. First, let's specify the number of variables we are visualizing. So n groups equals four. Then create a list
with the means and standard deviations for each
species type in the dataset. Means and so we'll do this for each of the three
different types and we'll use the holders
std and means to hold the numeric information
for those variables. The same thing for the
second one, and okay. So now we have the means
and standard deviations. We'll create a figure
which is called fig and an axis
object in the figure called ax using the matplotlib's
plt.subplots() function. So ax or fig, ax equals plt.subplots will give us the space to
start making the plot. Then the index holds
the locations for the variables and the bar width specifies the width of the bars. Everything in our plot will
be added to the axis objects. We can just add the bar
transparency like this. We'll do it at 0.4 and we can adjust our error bars using
the error config argument. So we'll adjust
those to about 0.3. Next look at the bar chart on the axis with the ax.bar method. So we'll call this rects1 equals ax.bar and we'll
use that index argument, we'll add in the
means for each of the three different flower types and the bar width that
we've already specified, as well with the transparency
and the color that we would like that to be and then we'll add in our error bars and the associated height for those error bars from
the error config argument. We'll repeat this for
each of the iris species. Note that we're adding an additional bar width argument with the second
and third figures. So we do rects2 and we'll do
this one for the second one. We'll change the color to r and we will add an extra bar width argument. Then again for the
third iris type. So we'll do the transparency
using the alpha. We'll change the color and we will add in the standard
deviation and mean. After creating the plot, we can add information to the plot to make
it more readable. So our final step is to
add some texts for labels, titles, and axes tick marks. So we'll do this
using the ax.set, and so each one of
those is going to correspond to one of the
things I just mentioned. So ax.set x label, so for the variable name, and then the y-label
for the means and the title would be the means
by variable and species. Then we can use the xticks
to indicate the bar width. Again, we can add a
legend so that we can easily associate each color
with each type of flower. Alright, so that
looks pretty nice.
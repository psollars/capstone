So I want to talk about identity and
access management within AWS. You're not going to have any homework
assignments related to this, but you should have awareness of what it is. It has far reaching
tentacles throughout AWS, every cloud vendor has a version of this. AWS is probably the most sophisticated,
and it also the place where things
get really complex very fast. In AWS you have the concept of a user,
and if you go into your IAM page on your AWS account,
you can just search for IAM and be there. You'll see that you're logged in
as a user that's provisions for this class with a certain set
of policies assigned to you. Let's go under policies for a second,
policies are really where this comes from, and where the magic of AWS
happens with security. You can use policies to do things like
prevent users from getting access to certain things. Only seeing things with tags, find grain access control within
the services that you have. By default, Amazon comes with an enormous
number of pre built policies, and you can create custom policies. So I can come in here and I can say, what
I want to create a policy that restricts or grants access to a specific service. Let me give an example here. First of all, it's going to make me
choose the service from all of the Amazon services that exist. We're familiar with EC2 already,
so let's use EC2, and then within EC2 there
are actions that one can do. And if you actually start scrolling
through these and expand these, there's a lot of actions that you can see. And so we're going to go through and
expand all of these, and so these get divided into a couple
different categories by default. Items that lets you see information, literally a list of items,
think of it like a file listing. So the list items will the list
of addresses within an instance, the list of instance names, the number
of subnets, the names of the subnets. Just listing data, reading data
gets a little bit more information, you can get specific data out of them,
right? Let's you take action, and so
if you wanted to create an AWS instance or create a key pair which we did in
our previous lecture, for example. You can assign access to do this,
gets pretty sophisticated pretty quickly, and then permission management
is specific to EC2 within there. And so I'm going to say,
you can do everything with an EC2, and I'm just going to check the checkbox. And then it's going to come down here and
it's going to say, hey in order to do these things, I need
to provide more information around it. And so what do I actually
want to grant access to? Very rarely do you ever check that
full permission, so I might say right, which is going to give a bunch
of different things as well. And then I can come down here and I can specify what are they
able to do specifically. So oftentimes you'll see under this
resource tab that you can limit things to a specific instance. You can limit things to
anything within the account, you can specify how it works
using this thing called an ARN. And an ARN is an Amazon resource name, and it basically specifies what somebody is
able to do with a specific instance or you can do a star on here and
grant access to anything. And so you'll notice that it asks for
a region, and account number which for the sake of most instances you're
using your own account number. You can actually write policies for other
accounts, but that gets very complex. And then the actual specific
item in the end, and so if you wanted to limit who can
create a volume for example, I just saw it,
you can actually specify the volume ID. Who is able to write to it,
who is able to lead to it, et cetera. Where this gets fun and really interesting is you can give
people access to specific accounts. You can also come in here and specify that
there are request conditions around it. So not only are you limiting the resources
to a specific tag, you can actually say, you know what you've got to be within
a specific IP address range to do this. Every single Amazon service allows
you to write a policy around it, you can get very detailed,
very quickly with your policies. It's good to write good detailed
restricted policies, so you don't over grant access. But you'll often find people
struggling with writing these, one of the cool things that happens
underneath the surface here is these policy documents
that you're writing. Let me just write a quick policy for
S3, S3 is the storage system, so I'm going to say in here that people
can list buckets and buckets are there. They're like file directory is
the way you could think of that, and that they can get an object which is
effectively downloading that object. And we'll let them put an object
which is uploading an object, so they can list things and download things. And I can come down here and
I can specify, let's limit this to
a bucket called mads test, and we'll limit this to all
objects within mads test. So I've now created my custom policy, what's cool about this is
underneath the surface. All this is doing is writing Jason,
and why is this interesting? Because you can write them
programmatically, and in fact I don't spend a lot of time clicking through
this visual editor to do things. I typically write my policies
programmatically, and save them out like
everything else in Amazon, it can have a tag associated to it,
and we can call this Mads S3 perms. So once you've gotten a policy created, what you typically do next is you
assign a user to that policy. So maybe I've got a user that's
going to be uploading data, I might say Mads uploader, they're going to be programmatically
accessing AWS using Python. And then I can say, I am going to
give this policy access to it. So we're going to come
here there's my policy, I can also attach any of the built in
policies that I want keeping in mind that it's going to grant more
access when I do that. So maybe they need to let's do,
I don't know EC2 will let them do anything they want to with
an EC2, so EC2 full access for example. And now I've created my user account, and
it's going to give me my user name and password which I'm not going to show
on a video for obvious reasons. And now I can use that in Python which
we'll see how to do later on, but IAM as one of those things
you've got to be aware of it. You hopefully don't have to spend a lot
of time writing complex policies in here. But if you are troubleshooting
trying to give access to a user, this is typically where you go to do that,
thank you.
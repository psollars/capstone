In this lecture, I'd like
to talk about some of the terms we're going to be
using throughout this class. We have a large number of terminology that's
related to the Cloud, related to systems
administration, related to the servers, related to the shell, which is the way we
interact with most servers. I want to go through
these terms with you, so that we're all speaking
from the same page. Before we get started on that, I should point out that this
is the first time that we've done this Cloud class at scale. We haven't really
provided this to you. If you've run into issues, let me know as soon as
possible via email. Every student in this
class is going to get their own dedicated
Cloud account. We've talked about different
ways of handling this. We try to build something, so that you'd have
self-provisioned resources within a shared account, but really we want to give you the authentic experience of coming into a job and saying, "Here is our Cloud
account, go do work." We are trusting you to have your own
dedicated Cloud account. We'll talk about
how to spend and how costs work later on. But if you run into technical
issues, let us know. Most of the time when we
think about a server. That's really fundamentally
what the Cloud lets us do, is it lets us have
access to servers. Sometimes those servers
are specialized and vendors bring their
own special sauce. But for the most part, we're using the Cloud to
generate servers or to use the Cloud servers
to do a specific task. A server is a machine
that sits someplace, doesn't necessarily have
to be in the Cloud. It can sit under your
desk, and in fact, here at the university there's a fair number of servers that just collect dust
under people's desks. Fundamentally, servers serve something to
a client. It's in the name. Their primary task is
to take a request, do something with
it, and return data. Normally we think about
this as a web request, and that's probably the
easiest example to understand. You go to your browser, which is a client
in this instance, and you type in www.umich.edu. Your browser reaches out to the University of Michigan
web server and says, "Hey, I got a request,
I need an answer." The web server is going
to come back and say, "Well, what do you need?" Your client's going
to say, "Well, I need the web page www.umish.edu/." The web server is going
to come back and say, "Here is a copy of index.html, which is what is
going to load in your browser and
now you see it." That's the typical
request-response cycle that we think around servers. You can run a server on
your own local computer. If you've ever run Jupyter
on your own local computer, you are technically
running a server. Jupyter, JupyterLab, Jupyter Notebooks will
run on your machine. You access it through
a web browser. It doesn't go over the Internet, but it is running as a
service on your computer. Most of the time, servers don't have a nice graphical interface. We'll talk a little bit
about that later on. You'll often hear people
talking about the shell. What is the shell? How
does the shell work? The shell is the
interface that you use for interacting
with a computer. If you are accessing a
server in the Cloud, most of the time you are dealing with a text-based interface. Your mouse isn't going to work. When you're interacting with it, you issue it a command, you press "Enter" when you're
done issuing that command, and then it will come
back to you and tell you the result of
your interaction. It's a little bit running
a Jupyter Notebook cell, except you're dealing
at a much lower level than Jupyter is working at. We keep servers in data centers. This is a picture of a
standard data center. What you're going to
see here is there are racks of hardware. Each one of those
doors is on a rack. Each rack has space for what
are called 42 rack units. You can get servers as small as a single rack unit and as
large as 42 rack units. When you're thinking
about how you put servers in a data center, you've got to think
about power and cooling, and all other
environmental factors. But ultimately this is what
a data center looks like. When we talk about the Cloud, the Cloud looks very
similar to this. You'll also notice in
the middle of this image there is a what's
known as a Crash Cart. It is a keyboard, mouse, and monitor
on a set of wheels. Servers don't have
monitors in those racks. That rack space is
really expensive and you want to get as many servers
in there as you can. The density is where you as a provider who is
selling those racks, those spaces, make your money. If you need to get
access to the server, if you need to actually
access the shell of a server, you wheel that crash
cart up to the back of your server and you
plug in your keyboard, mouse, and video, and you
plug your monitoring, and that's how you
access your server. University of Michigan has
three major data centers, some units actually have their own mini
little data centers. There's a cost commodity here around the larger
your data center is, the cheaper it is to
run per square foot, and this is where the
Cloud comes into play. The Cloud is effectively
one really big data center. If you're on campus
and you'd like a tour of one of the data centers I am happy to
arrange for a tour, please reach out to me. I'm actually trying
to get them to record a tour for this class. I bring up Southfield,
Michigan on here. Southfield, Michigan is where in Michigan most of the
Internet comes through. If you drive down
Southfield, Michigan, there's a bunch of
like what appear to be smaller office buildings, three, four-story
office buildings. If you just look casual
you think that they're just nondescript
office buildings. But if you look a little
carefully there's massive generators out back, to get into the office
buildings there's multiple vehicle gates that
you have to go through. This is where the
Internet traffic for most of Michigan
runs through. From here it goes
off to Chicago. This brings up the
concept of the Cloud. The Cloud is literally just
somebody's data center that you are renting
a server in. Typically, you do this by
the hour or the minute, and typically
you're not actually renting the full server, you're renting a
small portion of that server that gets divided up for use
by multiple users. Your Cloud providers will
buy really expensive, really high on the
hardware scale servers, and you'll come in and say, "I need a portion of that. I want one-fifth of that server. I need two CPUs and
four gigs of RAM." Whereas the server
itself might have 96 CPUs and 348
megs gigs of RAM. You're just getting a little
section of that server. Going through our terms on this, we are familiar with
knock-knock jokes. If you've ever told a
knock-knock joke this has a very similar pattern
that you might be used to. They all start off
with, "Knock-knock" the other person
responds, "Who's there?" Then there's this thing
that goes back and forth. The reason why this work is because there is a
shared understanding. I come up to you and I
say, "Hey, knock, knock." You assume I'm telling a joke and you respond
back, "Who's there?" We have a shared understanding of how this joke is
going to play out. Fundamentally that shared understanding is
super important. If I come up and I
say, "Knock, knock", to you and you don't have
that shared understanding, you're going to look
at me like, "What? You're in, what do you
knocking on? I'm confused." We have this shared
understanding along the set of protocols
that run the Internet. The fundamental overall
overarching protocols that are responsible for all of the Internet are
known as TCP/IP. These are the
low-level rules that define how computers
communicate with each other. They're effectively a
bunch of layered standards on top of each other,
and computers, servers, clients, phones,
everything that's all on the internet in some
manner knows about these, and that's how
communication works. We have these standards and they know how to
talk to each other. In my earlier example, I talked about the web browser going and saying to the server, "Hey, I need this page." Well, there's a set of protocols that define how that
actually happens. The most common one that
you're going to hear about is the Internet
Protocol Address. This is defining where
you are on the Internet. Everything that's on the
Internet in some manner has an Internet Protocol
Address and you talk to it. That Internet
Protocol Address the 141211243.251 is the University
of Michigan web server. Most of the IP addresses we're going
to be dealing with in this class take the form of four numbers between 0 and
255 separated by periods. The other thing to bring up
here is that not everything on the Internet needs to
be publicly accessible. IP addresses are a
little bit like saying, "Hey, here's where I am, you can come find me
on the Internet." Some things are private. They need to be on the
Internet. They need to get access to the Internet. But they don't
necessarily need to be accessible by everything. These are called
private IP addresses. Almost every Cloud provider uses private IP addresses and then translates them into public IPs. In Amazon and Google
and Azure, for example, the services you spin up are all assigned a private IP address but there is a
translation that happens within their networks
that make them public. You can actually go to
Google and find out what your public IP address is. Just go to Google and type
"What is my IP address?" and it will come back and
give you your IP address. IP addresses are great. They are the way
we fundamentally know where things are located at any given time on the Internet but they're
not very human-readable. Unless you're dealing
with people who spend a lot of time working
in this field, you're not going to
memorize IP addresses. I have a couple memorized. Anybody who's been working
with multiple servers for a while typically memorizes some of their IP addresses. But ultimately, we need a
human-readable mechanism to tell people how to
navigate around the Internet, and this is known as DNS. This is a whole four-week
long course on how DNS works. It's very complicated.
There's a lot to it. But ultimately,
what this does is you, as a human being, type in a name,
www.umich.edu, si.umich.edu. You press Enter and
your computer does some work to figure out what
the IP address of that is. As a user, you don't want
to have to memorize that. If you want to go
look at your grades, you got to type in
141.211.243.251. You don't want to
memorize that number. If you want to go
to SI's website, 18.211.166.136, you just want to type in
umich.edu or si.umich.edu. DNS allows that to happen. Let's get a little bit
more detailed into this, a service. A service is a
process or a program that runs on a server that
handles a specific task. Sometimes, you'll hear people trying to troubleshoot
something and they'll ask, "Is the web service running?" If you're running
Jupyter Notebook locally on your computer, that is a service that runs
locally on your computer, and a protocol is a standardization
around communication. You can think about a
protocol as a language. Services typically
speak protocols. Your Jupyter Notebook
running locally on your computer is speaking
the web protocol, the hypertext transfer
protocol to be specific. You might have a
thing running on your computer that
lets you play games with other people
that is speaking a protocol that shares
that gaming technology. You might have a device or a thing running on your
computer that lets you broadcast your screen to
an Apple TV or Chromecast. Once again, that is a service that talks
a protocol that sends that data so that
the receiving thing knows how to read it
and display an image. Now, these documents, these standards are defined
in what are called RFCs. RFCs are extremely long,
extremely technical, and extremely boring documents that describe how a
service should work. They're extremely
well-documented. They're very, very detailed. When we're talking about
protocols and services, typically, they expose
a port on the Internet. If we go back to the
address metaphor, your IP address tells you
where you're located. This is where your
house is, for example. The port tells you
what door to use. On the Internet, we use port 80 and port
443 for web services. When you are going to a website, you are using port
80 or port 443. That is the standard
web communication port. But you can actually
tell your browser, in this case, your client,
to use a different port. Flask, by default, if you spin up a Flask service, it runs on port 5000. Django by default
runs on port 8080. Every service has a defined port and protocol that it will speak, and that makes it easy to have
this shared communication. I know how to speak, I know where to go to
have that conversation. Your browser figures out what port to use based
on the protocol, http:// would be port 80, httpS for secure would
take you to port 443. When you do this, the first thing
your browser does, if you go to httpS://google.com, your browser is going to come
up and it's going to say, hey, I need to find the IP
address for google.com. At which point I am going to use port 443 and I'm
going to use the RFC's that I know about and the servers for google I know to do some communication and I'm
going to render a web page. I don't want to get too
much into firewalls. We're not going
to spend a lot of time talking about
firewalls with the Cloud. We're going to basically
write some rules that don't block traffic. Ultimately, this is
not a good practice, but this is a course that's an introduction course
to the Cloud and I don't want to spend
too much time getting the details of how
firewalls work. But firewalls that
their most basic thing say who can talk on
what port to where. I may want to allow people
only on campus to access certain services
so I might write a firewall rule
that allows that. Let's talk about Secure Shell. Secure Shell is a protocol for remotely accessing
the shell of a server. It runs on Port 22 and it
is defined in RFC 4253. At one point in time, if you wanted to
access a server, your only option was to
sit down in a room at a console and physically
type on that server. It was very time consuming, because you had to plan it out, you had to schedule the
time you'd be in the room. You had to leave when
your time was over. Your job at that point might
be a terminal operator. There are still some
industries that actually require that
you go sit down in front of a terminal
physically and access the shell for security purposes. But for the most
part we use SSH. SSH allows us to go and
interact with servers remotely. Otherwise, you have to go find the server room and sit
down in front of them, which might mean a plane ride. This is the RFC document. I don't want to get
too much into this. I'm not going to
make you read these. They are very well-defined. Well, I may make
you may read one later on. They're boring. They just make the
Internet work. You've got to know they exist. Sometimes if you're trying
to debug something, it's useful to look
things up in them. But you're never going to sit
down to yourself and say, I'm going to read
this cover to cover. Here's RFC 1918. That font is intentionally
too small to use. But this is what defines private IP addresses verse
public IP addresses. RFC 1149 happens to
be my favorite RFC. RFC is the memo that describes encapsulation of IP data grams in avian carriers. We've already discussed that IP, TCPIP is the mechanism in which the Internet
communicates. This is talking about using avian carriers to
use communications. Avian carriers can
provide high delay, low throughput, and
low altitude service. What is this actually
describing here? Once again, I said
the terminology in these is somewhat dense. But it's talking
about using birds to transfer traffic
over the Internet. RFC 1149 happened to be
published on April 1st of 1990. April 1st or April Fool's Day is a holiday in which a
lot of jokes are made, and this was a joke, but
it keeps coming back up. It's somewhat funny to
read the whole thing. If you actually keep reading
future April 1st RFC's, they build on top of this. One of the things I'd
like to talk about are some basic server commands. When you log into a Linux
server for the first time, there are some things that you might want to
be able to run. I'll go over this in a live
demo on a future lecture. Pwd will basically print the working directory that
you're currently accessing. Ls will give you the listing of files in your
current directory. It's the equivalent of like double-clicking on
a folder and your current operating system
and seeing what's in there. I want to thank you.
We will look forward to exploring another video. But for now, enjoy. In our next video we will start digging into some more of how to get into the
Cloud and what that all looks like. Thank you all.
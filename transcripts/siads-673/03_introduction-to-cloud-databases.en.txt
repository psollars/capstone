In the early days of the cloud,
the cloud provided the essential services, the networking the compute and
the storage. And as different cloud providers
came in and out of business, the vendors specifically
amazon tried to differentiate themselves from the rest
of their marketplace. And one of the ways in which they did that
was to do added services on top of it. So think about this for a second,
you're building a website. One of the things that most websites
have is a database behind it. The traditional way of doing this pre
cloud was you'd buy a physical server, you put it in your rack, you'd
install your database software on it. And you would pay a database administrator
to sit around and monitor and maintain that server and other services,
servers related to databases. So that worked well,
especially if you have lots of databases, but If you only had two or five or 10
databases, it was kind of expensive to pay that resource to sit around and
maintain those databases. So amazon came in and one of the things
you do is you contract with a vendor to, maintain your databases for you. Like there were solutions to that problem. But one of the earlier services from
amazon was something that it calls RDS and amazon. RDS is the project that lets you build and
maintain a database in the cloud, and not have to actually worry about
the underlying infrastructure of it. Now in the mads program,
we teach postgres sequel. And so, we're going to talk
a little about postcards, but there are lots of different
databases out there. And one of the nice things about amazon
is that they have built this service that maintains your database for you. And so if we look under databases
in here we've got some options. We can create a database. We can restore from S3,
S3 is Amazon's built in file system. You can create a snapshot
of a database and actually restore from the snapshot in the
homework you're going to actually go under public and you're going to
restore this demo database here. But what is amazon databases? Let us do, it lets us create
a database somewhat on the fly. So I can assess, create database and
it's going to come up and it's going to say what type
of database do I want to use? I can do my sequel Postgres Maria
which is a competitor to my sequel. Oracle or Microsoft sequel server. We've done a lot of Postgres
work here in this class. So I'll choose Postgres and
it's going to come up and it's going to ask me how do
I want to configure this? And so multiple AZ we've learned
about availability zones. What this does is it actually creates two
databases and it synchronizes them for me. And if one of the availability
zones goes down, amazon will take care of flipping it over. So I as the database administrator or the
customer never have to worry about this. I choose that multiple AZ and amazon
manages the actual high availability, and provides the synchronization, and will allow the fail overs
to happen automatically. And if we scroll to
the bottom of this page, well let's not go down well stay in order. So we can go through here and
we can configure how we want to do this. We're going to stick for
this class to the dev test framework and a single database instance. It's going to ask us to
name our database instance, remote demo and our master user name. So in some instances this is admin or
root. In Postgres it defaults to post grads and then we're going to need
a strong password here. And it's going to ask us for
our instance class. This is the actual underlying
hardware behind our instance. You'll notice that when you look at these, they are the normal instance
types that we have available. We've been using T2 micros or
T2 nano's on the EC2 side. This instance type is a DBT3 micro. And so we'll just choose that one. How much storage do we want? And on what platform, do we want to
automatically scale our storage? So this is a nice feature that says, hey
you're allocating 20 gigs of storage and if you go above 20 gigs
automatically scale it, so that you can keep increasing
the size of your database. Otherwise your database crashes in
the historical environment of this. Your database administrator might come
knock on your door and say, hey we're running out of server space on one of our
database servers, we need to add space. We need to go buy hard drives and
put them in and by space. Well we don't have to do that here. We just check this checkbox and
amazon will take care of it and we can specify what the maximum
storage threshold is. Do keep in mind you are paid,
you are paying for the storage so you might want to not make this so high. I typically want to keep
it within a range, but it depends on what you're doing here. Should this database be
publicly accessible or not. And so if you say the database
is publicly accessible, what that's going to say is that
anyone in the world can access it, assuming that the security
group allows for it. If not, it will only be accessible by
systems EC2 instances or other amazon services that are on your network for
this class, we're going to say yes here, I'm going to scroll down here,
this is the default database sport. We're not going to want to change that. And then down here, there's some other
options that you can sit in here for this class. We're going to actually uncheck all these, you wouldn't actually want to do
this in a production environment. But in this class environment we're
going to actually do that and we don't need automatic maintenance. And it's going to come down here and
give me my monthly costs now. It's going to cost me $15 a month for
Amazon to manage this instance for me. And I'll go ahead and say, yep,
that sounds great, create the database. And now behind the scenes amazon
is creating this database for me. I'm not going to have it,
save the password. This takes about 15 minutes or so
to actually go through and do this. It is not necessarily a fast process
to spend these up the first time behind the scenes. Amazon is creating an instance,
it's installing its management software. It is configuring the database with
some option groups that you can modify later on. If you want to dig into how this
is working behind the scenes and then it will actually tell you your
database is available for use. So I'm going to pause
the video at the moment and I will come back once
this is done creating.
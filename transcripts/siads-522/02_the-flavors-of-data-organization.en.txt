Welcome back, I want to continue
on our journey around data. And I want to talk a little bit about
the flavors of data organization. And data doesn't come just as a sequence
of numbers, often we're given data with some structure, and so
this is going to be important. So we don't just get the number 12 and
7, 12 and 7 are part of a database in
organized in a certain way. And there's different
ways of organizing data, I'm going to talk about a few different
techniques that you might see a lot of when you're doing information
visualization, they're quite common. The first is the relational model and this is probably the one that
you're most familiar with. So basic things like tables that
are describing a data set and the relationship between
these different data items. So we have records, which are the
different rows in the data set, and there are a fixed length tuple. A tuple just means a sequence of pieces of
data or elements or facets of the data. So this is it might be an employee
database and each tuple has an ID, a name, and department, salary, and
when the person was hired. The relation is in a schema, which is the
the high-level metadata that's describing what it is that we have in the data set. So that top row that indicates ID,
Name, Department, Salary, and Hired. And, again, the example of the Tuple,
which is the first one for Anthony White. The database, therefore, is a collection
of these relationships, these tuples. And columns have attributes and
sometimes they have a domain. And this is a specific meaning of the
word, which is something like string, or integer, or date. These are things that the relational
model will understand. The relational model is invoked or
accessed through relational algebra. So if you've played with SQL,
that should be familiar. We can do things like select everything
from the table where the salary is more than 50,000 and
order by when the person was hired. So this is expressed as a program
which can then be invoked on this table and we will get
the results back in another table. SQL supports a number of different
operations and they're constrained. So we have selection, projection,
sorting aggregations, and so on. So these should be familiar if you've
done SQL, and most of you have by now. And this is, again,
the most basic data type or basic data structure that
we're going to be using. The next one that will be common
when you're doing visualization is statistical models. Statistical models are also
relational data sets, but often reflect a certain kind of data. They are cases or observations pulled
off in from experimental things. So things that we observe in the real
world or data that we collect. And so we're going to
construct these data sets and we might have different properties. Again, and
it looks like a relational data set and will be able to access
that in much the same way. So we have the statistical models,
in a statistical model, we're generally trying to model a system. So we have this equation like y=f(x,a). So x and a are basically the things
that were changing in the, and y is what we're observing. Another way of saying that is that
we have the independent variables, things that were manipulating or
measuring, so the x and a. And the dependent measure,
which is the outcome, which is the y. So, for example, we might be giving people
different kinds of medical doses of something, of some drug, and
we want to measure the response. So let's make this quite concrete,
so we have two drugs A and B that can be adjusted. These are independent variables. We can give A in 10, 15, or
20 milligram doses, and B can be 16 or 23. So these are the different
things that we can do. There are six possible combinations and
we're going to call this the domain. So you can see over in the corner here,
this is the combination where A is set to 10 milligrams and
B is set to 16 milligrams. We're going to measure the impact
on white blood cell count. So this is the dependent variable, this
is what we're measuring as an outcome. And so the way we're going to do this is
we're going to run a bunch of experiments. We're going to have our patient IDs, we're
going to dose them in different ways. Using the domain,
using items from the domain, and then measure the white
cell count as output. We have some hypothesis that see the white
cell count is a function of A and B. We know that C can range from 3.5 to
10.5 billion cells per liter, and that is what's called our measure. So we're going to do this analysis and
we're going to try to find visualizations that help us understand whether
our hypothesis is true, whether we need to test something else,
and so on. So this is a different kind of data
structure that is used to encode data in a database. Okay, and we're not talking about
encoding it into the visualization. We're just talking about representing it
in a structure that we can access and use. The last one that I want to talk about
is something called a data cube. And this is, again, very related
to the relational data sets, but we think about it in terms of 3D structure
or n dimensional structure, actually. Because we can have more than that,
it's just hard to show that on screen. So what we have here is a data set
where we're measuring the number of pounds of fruit gathered
in three different farms. So we have Farm 1, 2, and 3, and
we have pears, apples, and oranges. And we have different months from
which we've collected this data. So each of the cubes basically tells
us how many, let's see over here. This cube down here tells us
how many pounds of pears we collected from Farm 1 in April, okay? So that's pounds of pears over in this
corner produced in Farm 1 in August. So what a cube allows us to do
is basically roll it up, so we can aggregate or disaggregate
based on what we're trying to do. So, let's say we're trying to ask
a question about the number of farm fruit and and the total collected things. So we don't actually care about
which month we got this data from. We actually just want
to know how much fruit we collected across the entire season. So we're going to use a basic SQL query, the output of which will be a new
cube that looks something like this. Now, in this structure, the cube represents something
a little bit different. In this particular cube
down at the bottom, we have pounds of pears produced in
Farm 1 across all months, this time. So we've aggregated all the months
in the in the cube on top. So this cube over here gets aggregated
into this cube down here, okay? We can keep going and
further compress this, so let's ask a question about the number
of fruit across all Farms. So we don't care which Farm produced this. And so we're going to have a structure
that looks something like this. And here, we have pounds of pears
produced in all Farms across all months. So what we've done is
compressed along this dimension in order to map this to here. So all these cubes down at the bottom get
mapped to this cube down here summed up. And, finally, we're going to
go to the last level which is, we don't care which Farm. We don't care how many,
we don't care which fruit, and we don't care which month. And so we have this aggregate cube that
represents all the pounds of fruit produced across all months
from all the Farms. Okay, so that's what we have
at this very low level. Now, with the data cube,
with this all up structure. We're actually remembering where the data
came from, so it's possible to go back up. So this is called rolling up,
we can also go drilling down. So if we're given the structure,
this low-level cube, we can actually reverse and go backwards
up using a similar kind of SQL query. So we can go from, again, this very
condensed view back to this uncompacted view that has all the different
features that we might care about. Okay, so the takeaways are that we have
pieces of data that are being held together in many different
kinds of structures. Most of the structures that we're going
to focus on in this particular class are relational. They might be 3D or
n-dimensional as we saw with the cube. But largely we're going to focus
on structures that look like that. There are other things like hierarchies,
and networks, and so on. Which we're not going to talk about in
this particular sequence of lectures, but are an alternative way
of representing data. Structures have both a domain and
abstract meaning. So we could be collecting this
dose-response kinds of data sets from our experiment. But they also have the abstract meaning, which is sort of the mathematical
things that we can do with it. They do enforce certain
kinds of relationships and will constrain our
implementation as we'll see. So this is a thing to consider. Once we put something in a row or
a column, everything within that row is
connected as part of a set. And everything within the same
column often has the same type. And so that enforced relationship
will impact our implementation. All right, and with that,
thank you for listening.
Welcome back to our discussion
about data models. I want to switch gears a
little bit to thinking about, how to implement these things. So far we've talked in
a quite theoretical way, about nominal or null quantitative and
the encoding and so on, but we actually have to get these things on
the screen somehow, or we want to print
them or whatever it is. So how is it that we're
going to implement this? We're going to have
a few different choices, but they all boil down to this. We have our data set, we have the set of rules
that we're going to use to encode and we're going to think about this process that is actually
going to be implementable. So something that we're
doing on the computer, that will get us from the data
set to the visualization. So what is that thing that
we're going to do in between? We're going to
consider a couple of different extreme options first, and then think about
something in the middle. So in terms of a full GUI, there are environments
that will support visualization
construction and for many tasks they'll be
perfectly reasonable. So if you haven't seen Tableau, I do encourage you to
download and give it a try. So here's Tableau
session in action. We are basically
loading up a data set, and you can see that
the user in this case me, is dragging a bunch
of things onto the screen and the visualization is being constructed dynamically. So just by a simple drag
and drop interaction, we're able to construct pretty
reasonable visualizations. On the side over here, they will even give you suggestions of other things
that you can do, so there's this Show Me panel, which will give
you other options, but again it's entirely drag and drop and quite simple to use, and great for a certain
constraint set of things. Okay. On the other extreme where the GUI is not
actually doing what we want, and we want to launch
something on the web, or the particular kind of
visualization isn't supported, and something like
Tableau, or Excel, or Microsoft BI, these tools may not support what it is that we want to do, we're going to have to
program from scratch. So the way we have
to do that is a little bit more complicated. We're going to have
to somehow transform the data into the marks
on the screen. So again thinking about this data set that has
these three individuals A, B and C, with certain scores, one, five and two, now we're going to have to expand this data to also include other things that we want to use in order to constrain
the visualization. So the first row over here is A. We have to figure out
which mark we want to use, so in this case
we're going to use a rectangle for
all the different data. We have to figure out
where to draw it. So what the X value should be, what the Y value should be, what the width should be, and
what the height should be, and then what the color
should be and so on. So over here this bar A down
at the bottom is going from 0.0 and it's 12 or 10 wide, and 15 high in terms
of pixel distance. Bar B, we have to figure out what we're
drawing a rectangle. Now we're moving
over to location 12, again it's ten wide and then
it's 75 high and so on. So all these things
are used because the computer understands how
to take this constraint, so I want to draw
a rectangle and it should have this coordinate and
this set of shapes and so on, and that's what I'm
going to use to draw. So calculate the table, and then we're going to draw using a big function that
we have to implement, something that will take the
visual and this encoding, and represented it on the screen. Now if we're lucky, we might have some tools
already built-in. So we might have some functions
to draw the grids, some function to draw the axes, and then basically for every row, we're going to draw
the point in some way. Internally, drawing
the point might mean this, drawing the rectangle
for the first thing, drawing the rectangle
for the second thing, the third thing and
then drawing the axis and the labels then adding
interaction and so on. This is complicated, we're basically you
are going to have to think about the best way
to transform this data set into these properties that our drawing system can
actually understand. Because this is a complicated
and expensive thing. We're going to have to
think about coordinates, we're going to
think about colors, we're going to have
to think about how rectangles are different
from ellipses and so on. This is challenging.
So this is annoying, so instead of thinking
about the encoding, what it is that we want to
do with the visualization, or doing lots of
repetitive annoying work, and then if we want to change anything that becomes
quite difficult. So there are abstractions, there are tools that
basically help us, so people have implemented
higher level ways of representing data or
generating visualization. So there might be function
that your programming language has that says,"
generate a Bar chart." So given this data, generate a bar chart or generate
a Scatter plot. But now every new chart has
this new set of requirements. So there's a lot of
specification that we might have to pass
to the Bar chart, it's not just passing the data, it's passing a lot
of other rules. Same thing for Scatter plots. So every time we add
a new chart type, we have to remember
a new specification. This might be too high level
for us to think about, and very difficult also to move from one visualization
type to another. So do you want it
to experiment with a Bar chart and then
move to a Scatter plot, we have to remember
that a Bar Chart takes these set of arguments and a Scatter plot takes
this other set, and that becomes challenging. So these are the two extremes. We have full GUI, which is great but constrained
in some way, and we have programming
from scratch. What we're going to introduce
next is something called the grammar of graphics which
sits somewhere in between. It will have
nice properties of both, you'll be able to
programs certain things, have a high level of control, but not quite as
controlled as full GUI, and as easy to use
as the full GUI, but still a lot more
control than you would in a graphical
user environment. So it's important
to recognize that there are various ways
you can implement. So while I'm going to
suggest a grammar of graphics as a great way
of doing this, it's perfectly fine to say I want to use a tool
like Tableau, or some features built into our, or whatever it is that
are going to generate visualizations for me in
this much faster way. You have to pay
the penalty which is that these things are a little
bit more restrictive. On the other hand, you can
have programming environments and again this is
totally reasonable. If you have some creative
new visualization that's only doable by programming
it from scratch, that's perfect, it's powerful, but again it's hard to
learn and experiment with. It takes a longer time to
basically iterate through. But if you're inventing
some great new technique, by all means do it. The middle ground is going
to be the grammar of graphics which we're
going to pursue in another video lecture. Right. With that, thank
you for listening.
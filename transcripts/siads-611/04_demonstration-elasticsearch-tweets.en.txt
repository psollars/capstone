Hello and welcome to another walkthrough
for Postgres for Everybody. In this one, we're going to walk
through a really simple example sort of from the Elasticsearch
client documentation. And so, in some ways it's simple,
but it's also very complete. And so again, you've got to get your
hidden values set up the right way so that your import hidden, you've got to use pip3 to install elasticsearch
if you haven't already done that. And away we go. So, print secrets,
why do we want to print secrets? Let's not print secrets. We don't want to show that in here. Then you would see all my secrets. So we won't print secrets. Secrets is just key-value pairs that
come in a dictionary. There we go. And so we set the Elasticsearch
client up with the host, the user, the password, the prefix, and
so it takes care of all that. As we've seen in other examples,
it's not really that hard to talk directly to it using requests,
just hitting it, but away we go. So we're going to basically start just
always by wiping out the index so that when we fill it up we know what
we're doing and then create the index. And then basically, Elasticsearch thinks of the world
in terms of documents, right? And so it's just a thing we start with. And
you can put arrays in here, and lists in here, and other
dictionaries in here, etc. The outer thing is always a dictionary
if you're doing it right. And then the insert, you have to have
a key, primary key in this case, I'm just calling to call
that primary key abc. And es.index, I think of it as the
insert. This thinks so much about the fact that it's the world's
awesomest inverted index that it doesn't even think of inserting the documents,
it thinks of indexing the documents. But there you go. We find out
if it's a success or not. We can retrieve
the document if we want. This refresh is in effect delay until
all of the indexes are finished. This is a look up by primary key,
so it's not that big of a deal. This says I'm going to actually
use the inverted index, so finish. This can be costly, so I'm
only doing it for demo purposes, tell it to recompute the index
normally would take up to 30 seconds. And so would you like to pause? Now this is a more sophisticated query and
you can take a look at this documentation. We're kind of following this
particular documentation. So this is a query,
Boolean is a combination. It just is a way to combine
multiple in effect like and, right? And so this is like a WHERE clause. And this must match, that is
looking for some text and that's actually not just a,
that's a somewhat soft match, whereas this filter is
like a hard match. This is like a WHERE clause. I'm looking up in this particular case,
this is like applying a WHERE clause. A filter is like really and truly reducing the number of
documents that are being searched. This bonsai is more of an approximation,
something that looks like or sounds like bonzai,
maybe with stemming, etc., etc. And so if you look at the document, I'm putting a type in here
that it's a type tweet. Now, I'm only putting one document,
so it doesn't matter. This is kind of your WHERE clause and
this is like your soft text look up and the bool basically says both
these things have to be true. Right, so, the bool wraps both
the match and the filter. Well, the must and the filter, okay? And so then what we do is we basically
call an es.search with this as the body, in this case, the
elasticsearch library is conveniently convinced turning this from
a dictionary into a string. And then we get our results and
we can parse through those results and pull various pieces of the results out. So, this is going to just, there's
no interactivity to it, it just runs. If you elastictweet, we drop the index,
we create the index, we add a document,
that's success add document. We retrieve the document
based on the primary key that we just did and so somewhere is,
there's the text. It's of type tweet, right?
It's just a JSON. And then we do the index refresh,
which again is pause and wait until the indexing catches up so
that we can do other searches. And then we do the search,
which basically says let's hit this. And we have a WHERE clause, the WHERE
clause is going to match the type equals tweet, and then we got one hit. And
then I go through and I parse this and I read that stuff out. And so that's just a simple
walkthrough of a completely self-contained with no external
data to put a document in, wait for the index to finish, and then
retrieve the document back out. And so this is just a good starting point because
you know it completely works, okay? So I hope that this little quick
walkthrough allows you to work with and change that code and build inserts of
various kinds that you like. Cheers!
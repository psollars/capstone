Hello and welcome to another walkthrough for
Postgres for Everybody. We are currently walking through the sample code called
elasticmail. And as always, you have to set
up your hidden values to get whatever your key and
your secrets and your prefixes and posts and
ports and all that stuff. And so this particular assignment we are going to do something I did from Python for Everybody, where we have an archive of
email lists for the Sakai open source
project for 2005. And so this is some data
that I used in all of my courses and it's on a super-fast server,
its on dr-chuck.net. I think I actually crashed
some of the people, so I made my own copy that's
really super performant, this is really fast. And so
we're going to hit this. And so email is kind of nasty,
and so this is mailbox format. And this is pretty nasty stuff.
and there's all these headers. The key to a mailbox format
is it starts with From space followed by a series of headers, which are sort of key-value pairs
with a colon and a space, and then a blank
line and then the body. And so that's basically
how email looks. And so a lot of this code
unfortunately is just crazy date parsing and crazy whatever,
and different email systems. And so I'm not sure how
much value this all is. But that's the data
we're looking at and I guess let me just run this, python3 elasticmail. And I can go grab ten messages
and it grabs them. So it's retrieving this and it's parsing it
and adding a document. Pulling a document over and
over and over again. So I'm in effect really crawling
an API full of data like this and I'm filling it
into my Elasticsearch. So let's walk through the code. We're going to use the
elasticsearch client that's in Python. Some of the parsing has this parsemaildate, that's
because different versions of Python have
different mail parsers and this is like backwards
compatibility. So we connect up, we're going to use the
same index as our user. We're going to drop it and
then we're going to create it and then we're going to start walking through
these mail messages, there's the base URL. And you can see that I can get
ten and I can get two more. And so sometimes these
are real long running processes and you
want to restart it. If you're really
going to do this, you probably wouldn't
drop this index this way. I gave you a way, so let me just get out of here. Quit is not the right thing. So here's this elastictool,
python3 elastictool. So I can say match_all. So there's a bunch
of things in there. Now, one of the things
you can do here, you could actually make it
so that this would restart itself by commenting out this dropping and then if you
wanted to restart it, you'd have to say delete because that would basically
wipe out the index. Because now if I say match_all,
there's nothing there, okay? And this delete command here is
the same as running this, but I'm making it simple so that when you run this over
and over and over, it just starts over
and deletes it. So let me go ahead and
start this back up. It's going to delete it, but I also deleted
it once over here. So I'll throw ten messages in, get caught up with the ten messages. And so we're reading using requests, we're going to read this a bunch of code to read that API. If something goes
wrong with that API, it counts the failures. It prints the URL and how many
things we've got. So I just retrieved
2,434 from that URL. Then it's looking for
From space, and again, that's if we were
going to retrieve more than one at the same time. Then it's going to do
some breaking to get the email with a couple
of different formats. Then we're going to get
date, hack the date. Then we're going take the
headers and split them. And the headers, again, are all of these guys from here to
there with the colon space. So you'll see I'm going to
split things based on colon. So that says, let's use
a regular expression. Go find everything that's
not a colon or a space, up to including a colon a space and then extract
all that stuff out. So we're extracting
two parameters. We're extracting
everything up to and including the colon space
with a regular expression. And then we're extracting
this second half with a regular expression. And then we're cleaning
all this stuff up, converting it all to
lowercase and then making a big giant dictionary
of key-value pairs where this is the key
and this is the value. Not including the
colon, I believe. So that'll be the key because
it stops at that point. And so now in this dictionary
we have the date, which is separately parsed. And so now, we're going to
actually insert this stuff. So we're going to
make a document, we're going to have
the email address, we're going to have the headers, and we're going to have the body. And then we are going to
put that in store that email into
the Elasticsearch index, then we're going to print
out for our own debugging the fact that we've
added the document, it was created on, here we go. That's the position. In this case, I'm
using the start, which is the number. Goes up by 1, 2, 3, 4, 5, because I want to be
able to restart it. So I want to know that I'm on the fourth email message or the 50th email
message in printing out the set and
every 100th document, you can see that I added it. I added it and it was
successfully created. And then every 100th document, so if I do like 100 more it pauses,
or at 200 more it'll run. Okay? So this is the nature of like scraping imperfect data where you just don't know
how good the data is. And so let's see, that's running. I'll let that run for a while. So in elastictool.py,
now I can do a match_all and you see that there's
a bunch of stuff in there. And I can do a search for like Zhen. And you see some mail
messages from Zhen. And you see, in this case,
you see the index that it's in, the ID now is a
increasing integer. And then the source document
has got these headers, so you'll notice that the
headers have been turned into a series of key-value pairs, which is really just,
the headers are a JSON object. I'm trying to give this to Elasticsearch in a way that can be the
best possible way. And then of course, the body is the actual mail message
that Zhen sent to No, actually Glenn
sent it to, it must be he sent that to from Zhen, or mentioned Zhen in it somewhere. So there you go. So I guess you would just
hit Enter and we get out and so this can repeatedly just go and retrieve and
retrieve and retrieve and then put it into an Elasticsearch
database. So that's a quick walkthrough of the elasticmail code and I hope that you found
this useful. Cheers.
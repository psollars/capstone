Hi, so we've got our final project here. We've got a request from a client that's
under a non-disclosure agreement. And we need to build a tool for them
that's going to help with the estimation around their Broom Flying Program,
their shared Broom Flying Program. What you're going to do to get started
on this is you're going to click at the bottom of that assignment. There's a link here that says
to start please go here. And you're going to be
presented with this. If you don't have a GitHub account, which
you should buy this point in this class, but for some odd reason you don't,
you'll need to create one and you'll press Accept This Assignment. This is going to create a new repository
for you and bring our sample code into it. At the time I'm recording this video,
not all the sample code is in the project. But today what I want to show you is how
to play with the web server that our web team has built for you. And so
I'm going to go through that exercise now. Once this is done,
it'll give you the URL to your project. And we can go here and say clone,
we want to grab this URL. We want to make sure that
URL starts with HTTPS. Okay, so
I've got this copy to my clipboard. Let me go back into Thia. The first thing I want to do here is
I want to open up a new terminal. And I'm going to go ahead and
clone this command, clone this repository, and the syntax is a little bit weird. Were going to type git clone. We're going to paste that URL and
we're going to do space period. And so what that's going to do is
it going to copy that repo out and put it in the current directory. This just makes it easier to work on. It's going to come up and it's going to
ask me for my GitHub username and my password. Okay, when this is done I
should over in my Explorer tab, see something that says web. And if I double click on this I should
see a directory called Web, or I'm sorry, a file called Webgui. If I've got something that
starts with U-B-T-J-N-E-J-F, that's the project code name for
this project. I forgot to put the period
is what that means. So let's take a look at web.py. What this is this is going to be example
code that you can use to run a web server that will parse data from your model. We've written some code on your behalf
to make life a little easier for you so you don't have to actually understand
how the web server environment works. So our web team put
together this starter code. You can feel free to use this or
start completely over. I'm going to walk through how you
would go about using this and kind of what this does. This is using a library called Flask. Flask is really cool because you can
build an entire web service with a single Python file. Django is probably the biggest
competitor to Flask, and it's also a wonderful framework. But you can't do it in a single file,
so let's take a look here. There's some imports here. And these are all the same. We don't have to worry about what's going
on here, we just have to leave them here. We define this app object and
just say it's going to be Flask. We have to define a secret key. Typically when this goes to production,
you would make this a random string. You don't want the word key in there,
and we're going to turn on debug. I'll show you what debug does later on. We're using the bootstrap web framework. And so bootstrap basically says enable
this app to work with the bootstrap web framework. Here's the first thing that
you can look at changing. We've got a dictionary here with
a feature name and the display name. And what this is is your model is going to
be expecting certain features to be provided to it. The feature name is the internal name
of what's going to be provided, so you want to make sure
there's no spaces in there. And this is what's going to
display to our users. So if we were building a model that
calculated the cost of something based on the size, we could do this size and
call this size of object or something. This is what's going to
show up to our user. This is what we're calling it internally. I'll leave feature two and
display name two here. There's some boilerplate code in
here that is explaining things. And then we get into
the actual code base here. And so what this is going to do is we're
saying if someone is at the slash URL, they're at the root of our site and
there sending something either via Git or post method. I'm not going to get into the technical
details on what those are, but come to office hours and
I'm happy to talk about them. Create our new form if
the form has been validated. Create an empty dictionary. We're going to go through and
populate these. And then we're going to render this
template when it's successful. And if we haven't actually submitted
the form, just render the form. Now, what does it look like to run this
code so you can see what's happening? So to run this,
we're going to type in Python Web, because that's the directory this is in,
web.py. And it's going to start
a development server. There's a couple of things to notice here. One is we are running this in debug mode. And what that means is anytime I
make a change to this file and save it like I just did,
we'll see that it restarts on its own. What this does is it makes it a lot
easier for you to actually test things. The downside is you'd never want to leave
this on in a real web service because it actually does a lot of things on
the back end that slow things down. So this says we're running a web server. The question is, how do we view it? So if you want to see your site, then what you're going to
need to do is copy this URL. Paste it in and replace everything but
the word proxy. So you want this is your
labid.cousera-apps.org/proxy. And if you pull that up you
should see something like this. Now we're seeing size of object here. And the reason why we're seeing size of
object here is because if you remember I said the size field is
called size of object. So if we come back here and we fill
something in, let's just do test and test and submit this. We see this code. And it says this will be displayed
with after a user submits your form. Please run your model and
put something here. So our web team is put some filler text in
there just to show that this is working. What we can actually do
is come down in here. And right before we display this,
we can do a print and just say this user submitted features,
save it and we should get two items. There's two features here. Test 1, test 2, press Submit. It still displays this. But if we look at our output,
we should see size is equal to test 1 and feature two is equal to test 2. If we had more features we needed to add,
we could just extend this dictionary feature 3
equals enter a value please. Whatever you think is appropriate for
the model you're building. So if I go back and I try this again,
test 1, test 2, test 3. And this is still displaying
this simple text. But if I come here you can see that
I'm getting these three dictionaries. And so what you would do in here is
you would write the code that needs to call your model. So result equals, well,
first of all you need to load your model. Then you'd call result. You'd call your model and you could
pass in user submitted feature size. And so
I'm just going to make this easy and say size equals,
let's just replace this text and say the size you entered is, Save, just to show how this
actually would work in production. We can come back here,
fill this out again. Let's just say size of object. Let's make it 25. And we can fill in gibberish,
and this is supposed to be 25. Submit and you can see that it's
returning the value that we submitted. So what's your task in here? First, you gotta build your
model if you haven't already. And then you're going to load
your model within here and you're going to run your model,
it'll do some predictions. And you're going to return
the result in this string here. And I will ask our web team to
make this a little prettier. So by the time you see this,
it should look a little nicer and probably be in this framework as opposed
to showing up randomly on a page. Please feel free to reach out
if you've got any questions. Thank you.
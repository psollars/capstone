So welcome. In this video, I wanted to show you
a little bit about the NumPy library. So in Python,
which you should be familiar with, NumPy is a library, so to use it,
we type import NumPy as NP, and now when we want to refer to
a NumPy library we can just type NP. So let's insert another cell below. So if you're in Python, you may create matrices that are kind of like matrices, like this,
right we create a list of lists. So here I have first row is one,
two, three, the second row is four, five, six, and the third row is seven,
oops, seven, eight, nine, okay. Didn't put my commas in there. So here we have a matrix A, but matrices in Python are are not really
the matrix like this. It doesn't work very well as a matrix. So we normally want to
use the NumPy library. So to create an array in
the NumPy library, we can input the matrix we go
NP.array to create an array, and then we put the,
in the list of lists as an argument and then now we can create our matrix A,
and if we'd like to see A so you can see that we have this new array A,
okay. And so this is this is an array and we can do all kinds of
array operations with this. For example, I could create another array
of B that equals two times A, okay. And what is this going to give us? Gotta print it out. This gives us B here,
which is just two times A, so it works very well that way and we can multiply the matrices
here like B times A, okay, and we get the product of B and A. Notice that this times is
different from the normal times, you can use an at sign
another way to do it is NP. And let's see what this gives us here. You get the same answer, same answer so
NP., that's applying the dot function to B and A which is taking the dot product
and multiplying the two matrices. If instead we just use the times sign,
so let's print out this, and print out A times B. Okay, that just multiplies
the matrices element wise which is usually not what you want to do. So you got to keep that
in mind when you're using the matrices that times is element-wise
not typically what you want to do, you can use the dot function or the at
sign to actually multiply the matrices. Another function that we
can apply is the transpose. So if I do NP.transpose A, one of that, I get the transpose of A,
the rows and the columns were now flipped. Okay, and there's different
notations that you can do. You can also output A.transpose. Let's see if that works or
do I need the parentheses at the end? There we go. So that's another way
to do the same thing. So you're going to need to use
the NumPy matrices in this and so I'm just giving you some
familiarity with them. I'm not going to do everything
with them right now. You can,
if you forget how to do something or there's something you need to learn, you
can look up how to do it online typically, there's lots and lots of references for
the NumPy library. Another thing we can do is
we can take the determinant. So let's say I want to know
how to take the determinant. So we will just search for
NumPy determinant. Okay, and here I don't have to go
through it's numpy.linalg.det. So let's go back to our Jupiter notebook,
and full screen view here, we'll type np.linalg.det,
put in our determinant, or our matrix A there, and we can see that
it will compute the determinant for it. So apparently there's some
linearly dependent rows here, if we want a non-zero determinant,
we can change some entries here so that it's something more exciting. Okay, and we see the determinant is -712. So if you don't know how to do something
you can often easily look it up. A few more fun things that you can do with NumPy is if you want to create
a new matrix, but not from a list of lists, you can,
there's functions to do that as well. So let's do C here equals NP.ones. And we give it an ordered list
of the size of the matrix. And then we'll print it out. Okay, and so here we got a five
by two matrix of just ones, if we change that to random.rand Well it didn't like something we did. Okay.
So let's just do five two, there we go a new matrix
of random numbers there. So those are some of the many things
that we can do with the NumPy package.
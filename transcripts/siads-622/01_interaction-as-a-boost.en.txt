Welcome back. Today we're
going to cover one of the last important
fundamental topics in the information
visualization sequence. We're going to need this
because although we've talked about it a little
bit all throughout, Info viz one and
Info viz two so far. We're going to need to have
a little bit more detail and that topic is interactivity. Remember this definition of
information visualization, the use of computer-supported interactive abstract
visual representations of data to amplify cognition. So far we've talked about
the computer-supported, we've talked about the
visual representations, we've talked about cognition. But although we've shown you some examples of interactivity, we really haven't gone that
deeply into the topic. And so we want to give you
the tools to think about interactivity as things that you can add to your
visualizations. Now the reason we want to
do this is so far we've had this layer cake approach where we've talked
about the domain, the abstraction, the
technique, and the algorithm. We've used these largely to structure the way we
think about the problem. If we have a specific
domain scientist who has lots and lots of
different kinds of questions or things
that they need to do, that might map to lots and
lots of abstract tasks. In order to support that using the tools
we've seen so far, requires answering this
fundamental question of how do we have the simplest, quickest representation
possible that will give us all the data?
And that's fine? But with the tools that
we've seen so far, we're limited to the
things like this, where we have lots and
lots of data being shown simultaneously on the screen
using multiple encodings. If we have lots of questions, we're going to need very
complex visualizations in order to support answers, doing comparisons, through
the visual channels. We have to have these really
complicated encodings that require, again,
multiple visualizations. Of course, we're
going to run out of screen space when we do this. We're limited in various ways. Some people approach this problem by basically saying, "Fine, we need all this data encoded, why don't we just use up
more screen's real estate and have lots and lots of
monitors and whatever?" But this is really not a practical solution
in a lot of cases, even if you have this, what you're going to see
is that you end up needing some kind of interactivity
to link these things. We have lots of questions,
lots of things, lots of tasks that the
end-user needs to do. We would like to
be able to support them using clean representations. The way to get to that is
by using interactivity. Even really simple
interactive features are going to give us a tremendous amount of
power in order to answer questions using
visual encoding. You're going to see
this in one second, where we have a really
simple representation of a stacked bar chart. This is fruit sales over
a certain time period. You have a representation
for apples, a representation for bananas,
clementines, and dates. We can easily tell
apple sales over time. Because there is
a shared baseline for the green bars at the bottom. So we can tell how apple sales have increased
and then decreased over time. We can similarly say
interesting things about total fruit sales over
time because we can read the top of each of
the bar chart stacks. But if we want to ask
specific questions about clementines or
dates or bananas, it's really hard to
answer those because there is no shared baseline
in this particular case. This is where
interactivity can help. Let me show you a really simple interactive solution to this. Here we're going to
have the ability to click on basically nodes, the smaller bar chart
elements on the objects. The baseline will
readjust, or specifically, the bars will readjust
so that they have a common baseline for whatever fruit it is
that you're looking at. If you click on bananas, it will have the baseline
that's adjusted for bananas. If you have clementines, it will readjust for
clementines, dates, and so on. Suddenly with this little
bit of interactive power, the ability to select
an object of interest, that is the kind of fruit
that we're targeting and reorganize the display
readjust basically, we're able to now answer a lot more questions
more effectively. The expressiveness in
this particular case does not go up but the effectiveness for any
particular task does increase, it's improved through
this interactive change. So a way of thinking about this is that interaction
is a power booster, interaction will be a thing that will allow us to make
more comparisons, basically boosting
the expressiveness and making them better, so increasing the effectiveness. Both things will be
possible using the kinds of interaction techniques that we're going to talk about today. Once again, this is our
high-level strategy. This is what we're targeting. We want to be able to identify the best way to
represent the data on a single screen without requiring lots and
lots of displays, lots and lots of different
kinds of encodings. If we can do this
through interactivity, then we're doing okay. This is going to be the
strategy that we have. There are different
ways of thinking about interactivity in terms
of design principles. I'll give you some that are very high level and
then we will dig down into more specific things
that are more task-based, focusing more on what
users will actually do. The first high level idea that I want to bring up is
due to Ben Shneiderman. Ben Shneiderman has this
mantra and the mantra says, "Overview first, zoom and
filter, details on demand." This is a good high level
principle for designing information visualization systems that have interactivity. For example, we might have
a system like Tableau. This is a visualization
of sales and profit for different customers using
a scatter plot approach. There's coloring based
on some feature, it doesn't actually matter, but you can see that there's
a lot of data being encoded using just the
simple scatter plot and colors on top of it. There are limits to this, there are things that we can't answer or can't do very easily. We don't know what the
points mean without clicking on them or selecting them
or doing anything else, we can't zoom and so some
data sets are harder to read because everything
is sitting on top of each other and this is where the power of
interactivity comes in. The power of interactivity
allows us to go from that overview first model
to the zoom and filter, so zooming on a specific region of interest within the display. The filter in this
case comes from clicking on the check
boxes on the right, selecting different
data to show or not show and that becomes part of the filter that the system then uses to figure out which
data should be displayed. The user has made the conscious decision and interacted with the display to zoom in and then pick the things that they care
about within that display. Finally, we come to
the fact that we actually need some
additional information. There's information that is not available to us when we we're
looking at this display. It's impossible to tell
what the dots mean, sometimes it's hard to read
what the actual values are, sometimes there's other hidden values that we would like to have access to and this is where the details
on demand comes in. You can basically in this
case brush over or mouse over a specific point and you get a pop-up tool tip
that is giving you additional information
about that data point. That is the details on demand. The details do not exist on the screen until you
actually need them, until you've identified
a point that you're curious about and need
more information about. Another way of thinking about interactivity
is this model, this is due to Ed Chi. Basically the flow chart
at the top is one that describes a very standard data processing
to visualization pipeline. We go from raw data, we transform it into data tables, a structured form, then we come up with
visual structures, how do we map the data table
to the visual structures? The encoding techniques
that we use, should this particular
data point be a circle, should the circle size mean
something, whatever it is. Then the views is the
last transformation where we're doing some
interactive thing to the actual visualization
zooming in and what not and having access to
additional information. We're basically taking the visual structure
that we've decided on and transforming it somehow
to make it more readable. This is all driven by some
underlying user task. The user has some
model in their head of what they want to
be able to do or see or whatever and they are
forcing the data through the pipeline at the top in order to get it to look
the way they want. The way they control those transformations is
through the interactivity. This is the language that
the human speaks back to the computer in order to control what it is that the
computer is doing. At each of these gaps, wherever there's a transformation from raw data to data tables, data tables to visual structures, visual structures to views, those are opportunities
in which the human, the end-user can
basically go in and control what is being
done within the display. Things that they can
do interactively through direct manipulation,
through speech, whatever the kind of technique
it is that they're using, they can control what it
is that the system is doing to ultimately get
the display they want. Specific examples of this
for data transformations, we have tools for
example that let us do great schema mapping from raw data to data tables or from multiple data tables,
merging them together. Schema mapping is a
thing that we might want to do as a pre-processing step. At the visual mapping, there are tools
that we've learned. The best color is to use the APT style algorithm
that basically allows us to pick the
best visualization style. These are encoding
decisions that we make and different pieces of software make those visible
in different ways. Tableau for example, this is
something that both supports the visual mapping and the view transformation
simultaneously. But Tableau offers a number
of bells and whistles that are in their graphical
user interface that allow you to basically control those transformations
as the data goes from data table to visual structure, and then how that's
transformed into different kinds of views, so
different kinds of encodings. Zooming, panning whatever it is, are basically controllable
through the interface, through a number of
interactive techniques that they've allowed, the
affordances that they have. These are different places where we can add interactivity
into the system. But this view is still
a little bit limited for us because we still want to be able to know what the interaction language for information visualization
actually is. We've gotten to the point
of knowing where we can place information
interactivity in information visualizations,
but we want to know, is there a smaller subset
of ideas that are common across information
visualization that represents a grammar
of interaction, or language of interaction. To get to this, we're going
to use a paper by Yi, Kang, Stasko as one
of your readings. It was a larger meta-study. Looking at a number of research papers in the space and also a number of systems. From that, they isolated a number of interaction
techniques, 311 different kinds of interaction techniques that were used across all these systems. They ended up using a classification based
on the user intent. What is it that the user
wants to be able to do? What is the ultimate action that they have in mind
when they are doing that they're using that
particular interactive element? The seven categories that they came up with that we're going to talk about in detail for
each of these are select, explore, reconfigure, encode, abstract/elaborate,
connect, and filter. These are seven categories
that are prevalent throughout many of the information visualizations
that we're going to see. You'll also notice that many
of the systems that we'll talk about are actually
combinations of these features. It's important to recognize that different systems use
different subsets of these in different ways in order to support the functionality that they would like to support. We will often point at one specific example within the system that we're looking at, but you should keep in
mind that there are many other elements that also exist within the systems and sometimes one needs to
happen before the other. Oftentimes you need to select before you can
connect for example. Those combinations are
also going to be critical. As much as we talk about each individual and specifically, keep in mind the connections. Just a few brief takeaways, interaction will be this
power booster for us. It will give us
this great ability to enhance our expressiveness and effectiveness without
requiring more display powers, more sub-visualizations. We're going to get
a lot of bang for the buck with using
interactivity, and because we're doing
things on the computer and not statically,
this'll be great. We're going to have
lots of things that are available to us from
direct manipulation, to speech, to touch to whatever that will give us those controls. The common refrain, this is again the Schneiderman mantra that
you should keep in mind. It won't work across all
problems that we'll see. But across many of them, it's a reasonable way of thinking about high-level design. Overview first, zoom and
filter, details on demand. You can also think about the
locations of interaction. This is that flowchart model where you had a feedback loop. This is a way of thinking
about the places in which a human can communicate
back to the machine, to the algorithm, to
the tool to tell it what the human would
like the system to do. Having some task in mind, the end user has these different places usually implemented by the
software developer, where they can come in and make adjustments to the
different elements. The thing that we will
focus on most though for the next few little mini-lectures are these seven use categories. Select, abstract,
elaborate, and so on. Those are going to be
driven by user needs, and so it is a good
way of looking at the interactivity problem
and understanding how it relates to the data
visualization problem. So we're going to target
the seven and basically break them apart and show you
different solved examples. With that, thank
you for listening.
Hello, in the last video we saw
that networks show up in many different domains. Today in this video, we're going to
see that depending on the domain and depending on the data we're looking at. We may want our networks will be
constructed in such a way that they encode more information that simply
who is connected to whom. In this video, we're going to see
what options we have for doing that. Let's begin by reviewing
the definition of what a network is, the way that I presented
it in the last video. I said that a network or a graph is a representation of
connections among a set of items. So we have our nodes, those are the items. And the connections are the edges. So there are simply lines that connect the
nodes like this network that we see here. Let's look at an example of a network
that we also saw last time. Here's a network of friendship, marital
tie, and family tie, among 2200 people. One of the things you can note about
this network is that the edges represent mostly symmetric relationships. So if Person A is friends with Person B, then hopefully Person B would also say
that Person A is a friend of theirs. Same thing with marital tie or
family ties. These are pretty symmetric. Compare this to the following. We have the foodweb that we
also looked at last time. Here the relationships
are not symmetric at all. So for example, there's network tells us
that the eagle eats this type of fish. And it's very important to keep track
of which direction decides is going especially for the evil. We wouldn't want to switch the direction,
right? The direction here indicates that
the eagle eats the fish not the other way around and so
these relationships are not symmetric. And you can see that we have to use
a slightly different type of network in order to encode it in such a way that. It's useful for
us to see what it's trying to say. And so this is the first
distinction we want to make. Sometimes our networks are undirected and use undirected edges that have
no source or destination. And we use this for cases where
our relationships are symmetric. We want to encode symmetric
relationships among the items. When we have asymmetries and
it's important to know what the target and what the destination is,
then we use directed edges. And these edges are directed because they
are arrows we know what the source and the destination is just
like in the foodweb. And these are called directed networks. Okay, so that's one example of a type
of information that can be encoded in the edge. Another example is when we
look at weighted networks. And the intuition here is that
not all relationships are equal, even if we're thinking about friends. Not all friends are the same. Some other friends are best friends,
so there are simply acquaintances. And sometimes we would like to
encode that in our network. Let's look at this example here. Let's imagine we take some data, and we connect coworkers who had
lunch together in one year. And this tells us who at some point in
time had lunch with whom in a year. Of course maybe more interesting
data set would not just tell us who had lunch with whom. But how many times a person
had lunch with someone else. And so we can encode this by
attaching a number to the edge. And now we know that this edge here
CE represents a fact that C and E went out for lunch 25 times. Whereas E and
D only when out for lunch twice. And that could be useful information
depending on what we're doing with this network. And so networks like this
are called weighted networks. They're networks where the edges
are assigned a weight and typically this would
be a numerical weight. If we think about signed networks, what's
happening here is that the edges have been assigned a particular type of attribute. And the attribute in this case is
either a plus sign or a minus sign. But this can apply in other settings where
we may want to attach other types of attributes. So here's some example. Imagine we have some data that tells
us about family relationships. Friendship relationships, coworker
relationships or neighbor relationships. And we can sort of construct the data so that we know who has what type
of relationship with him. So in this data, we know that C and
E are friends with each other. And that C and F are coworkers, and so these edges can carry attributes and
we can, label those attributes. Sometimes of course,
people can have more than, one type of relationship with each other,
all right? So our network which used
to be look like this. Maybe in reality looks more like this, where you have people that share
more than one type of relationship. So for example, A and B here are both
friends with each other, and they're also neighbors. And G and F are family members, but
they're also happened to be coworkers. And so as you can see here,
now we have to have these. Parallel edges or multiple edges that
are connecting, the same pair of nodes. And when that happens,
we call these multigraphs. So multigraph, is a network where multiple
edges can connect, the same nodes. And again,
these are called parallel edges. And they're very useful in
certain cases like this one, maybe there are different types of
relationships between two nodes. So we want to have multiple
edges that connect them. So in summary, the types of networks that we talked
about in this video are the following. We have undirected networks, and
we use them when we want to describe data. Where the relationship between
the nodes is pretty symmetric. We have directed networks where now those
relationships are not so symmetric and it's important to maintain
the order of the edges. Or maintain the direction of the edges. Who's the source? Who's the destination? Who eats whom? We have weighted networks. Where now we want to encode the strength
of the connection between the nodes that are connected by an edge. We have signed networks where we
are keeping track of friends and enemies. And more generally, we have networks
that have different attributes. And sometimes we want to have
more than one edge that connect a particular pair of notes. And when this happens,
we have multi graphs. In this tutorial, we're going to show you
how to construct all of these types of networks using network X.